const { SlashCommandBuilder, ActivityType, PermissionFlagsBits} = require('discord.js');
const {setTimeout: wait} = require("node:timers/promises");

module.exports = {
    data: new SlashCommandBuilder()
        .setName('activity')
        .setDescription('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ/—Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞')
        .addStringOption(option =>
            option.setName('description')
                .setDescription('–¢–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('type')
                .setDescription('–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
                .setRequired(false)
                .addChoices({ name: '–°–º–æ—Ç—Ä–∏—Ç', value: 'Watching' },
                    { name: '–°–ª—É—à–∞–µ—Ç', value: 'Listening' },
                    { name: '–°–æ—Ä–µ–≤–Ω—É–µ—Ç—Å—è –≤', value: 'Competing' },
                ))
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
        .setDMPermission(false),
    async execute(interaction) {
        await interaction.deferReply();

        const bot = interaction.client.user
        const desc = interaction.options.getString('description')
        const type = interaction.options.getString('type')

        if (type) {
            const status = {
                'Watching': ActivityType.Watching,
                'Listening': ActivityType.Listening,
                'Competing': ActivityType.Competing
            };

            bot.setActivity(`${desc}`, { type: status[type] });
        } else {
            bot.setActivity(`${desc}`);
        }

        await interaction.editReply('üß∏' + `–¢–∏–ø/—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ \`${bot.tag}\` —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω(-—ã)`)
        await wait(5000)
        await interaction.deleteReply()
    },
};