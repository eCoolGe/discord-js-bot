const {SlashCommandBuilder, EmbedBuilder} = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('info')
        .setDescription('–ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–µ')
        .addSubcommand(subcommand =>
            subcommand
                .setName('user')
                .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ')
                .addUserOption(option => option.setName('target').setDescription('–£—á–∞—Å—Ç–Ω–∏–∫')))
        .addSubcommand(subcommand =>
            subcommand
                .setName('server')
                .setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ'))
        .setDMPermission(false),
    async execute(interaction) {
        if (interaction.options.getSubcommand() === 'user') {
            await interaction.deferReply();
            const message = await interaction.fetchReply();

            const member = interaction.options.getMember('target') === null ? interaction.member : interaction.options.getMember('target');
            const user = interaction.options.getUser('target') === null ? interaction.user : interaction.options.getUser('target');
            let options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };
            let roles = member.roles.cache.sort((a, b) => b.position - a.position).map(r => r).join(" | ");
            if (roles.length > 1024) roles = "`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–ª–µ–π, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ –∑–¥–µ—Å—å :—Å`";
            if (!roles) roles = "`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π :—Å`";
            let status = {
                true: '–ë–æ—Ç',
                false: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            };

            const userEmbed = new EmbedBuilder()
                .setColor('#ea7777')
                .setTitle('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:')
                // .setDescription('Some description here')
                // .setURL('URL')
                .setAuthor({ name: `${user.tag}`, iconURL: `${user.displayAvatarURL()}` })
                .setThumbnail(user.displayAvatarURL())
                .addFields({ name: '\u200B', value: '\u200B' },
                    { name: 'üìõ' + ' –ò–º—è', value: "`" + `${user.username}` + "`", inline: false },
                    { name: 'üÜî' + ' ID', value: "`" + `${user.id}` + "`", inline: false },
                    { name: 'üï∏Ô∏è' + ' –¢–µ–≥', value: `<@${user.id}>`, inline: false },
                    { name: '‚úç' + ' –ù–∏–∫–Ω–µ–π–º', value: "`" + `${member.nickname || "-"}` + "`", inline: false },
                    { name: '\u200B', value: '\u200B' },
                    { name: 'ü§ñ' + ' –°—É—â–Ω–æ—Å—Ç—å', value: "`" + `${status[user.bot]}` + "`", inline: true },
                    { name: 'üíæ' + ' –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω', value: `<t:` + `${Math.floor(user.createdTimestamp/1000)}` + `:R>`, inline: true },
                    { name: 'üï≥' + ' –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è', value: `<t:` + `${Math.floor(member.joinedTimestamp/1000)}` + `:R>`, inline: true },
                    { name: 'üí∞' + ' –ë—É—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞', value: "`" + `${member.premiumSince?.toLocaleDateString("en-US", options) || "–ù–µ –±—É—Å—Ç–∏–ª"}` + "`", inline: true },
                    { name: 'üîá' + ' –ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ', value: "`" + `${member.communicationDisabledUntil?.toLocaleDateString("en-US", options) || "–ù–∏–∫–æ–≥–¥–∞"}` + "`", inline: true },
                    { name: 'üéß' + ' –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª', value: `${member.voice.channel || "`-`"}`, inline: true },
                    { name: '\u200B', value: '\u200B' },
                    { name: 'üë•'+' –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π', value: roles, inline: true },
                )
                // .setImage('URL')
                .setTimestamp()
                .setFooter({ text: message.author.tag, iconURL: message.author.avatarURL() });

            await interaction.editReply({ embeds: [userEmbed] });
        } else if (interaction.options.getSubcommand() === 'server') {
            await interaction.deferReply();
            const message = await interaction.fetchReply();
            const server = interaction.guild
            const roles = server.roles.cache.sort((a, b) => b.position - a.position).map(role => role.toString());
            const members = server.members.cache;
            const channels = server.channels.cache;
            const emojis = server.emojis.cache;
            // channels.map(chan => console.log(chan))
            // console.log(server)
            // members.map(chan => console.log(chan))

            const serverEmbed = new EmbedBuilder()
                .setColor('#ea7777')
                .setTitle('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:')
                // .setDescription('Some description here')
                // .setURL('URL')
                .setAuthor({ name: server.name, iconURL: server.iconURL({ dynamic: true }) })
                .setThumbnail(server.iconURL({ dynamic: true }))
                .addFields({ name: '\u200B', value: '\u200B' },
                    { name: 'üìõ' + ' –ù–∞–∑–≤–∞–Ω–∏–µ', value: "`" + `${server.name}` + "`", inline: false },
                    { name: 'üÜî' + ' ID', value: "`" + `${server.id}` + "`", inline: false },
                    { name: 'üÜî' + ' –í–ª–∞–¥–µ–ª–µ—Ü', value: `<@${server.ownerId}>`, inline: false },
                    { name: '\u200B', value: '\u200B' },
                    { name: 'üíæ' + ' C–æ–∑–¥–∞–Ω', value: `<t:` + `${Math.floor(server.createdTimestamp/1000)}` + `:R>`, inline: true },
                    { name: 'üÜî' + ' –£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞', value: "`" + `${server.premiumTier}` + "`", inline: true },
                    { name: 'üÜî' + ' –ö–æ–ª-–≤–æ –±—É—Å—Ç–æ–≤', value: "`" + `${server.premiumSubscriptionCount || '0'}` + "`", inline: true },
                    { name: 'üìõ' + ' Emoji', value: "`" + `${emojis.size}` + "`", inline: true },
                    { name: 'üìõ' + ' –û–±—ã—á–Ω—ã–µ', value: "`" + `${emojis.filter(emoji => !emoji.animated).size}` + "`", inline: true },
                    { name: 'üìõ' + ' –ê–Ω–∏–º–∞—Ü–∏—è', value: "`" + `${emojis.filter(emoji => emoji.animated).size}` + "`", inline: true },
                    { name: 'üìõ' + ' –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: "`" + `${server.memberCount}` + "`", inline: true },
                    { name: 'üìõ' + ' –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value: "`" + `${members.filter(member => !member.user.bot).size + 1}` + "`", inline: true },
                    { name: 'üìõ' + ' –ë–æ—Ç–æ–≤', value: "`" + `${members.filter(member => member.user.bot).size}` + "`", inline: true },
                    { name: '\u200B', value: '\u200B' },
                    { name: 'üìõ' + ' –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', value: "`" + `${channels.filter(channel => channel.type === 0).size}` + "`", inline: true },
                    { name: 'üìõ' + ' –ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤', value: "`" + `${channels.filter(channel => channel.type === 2).size}` + "`", inline: true },
                    { name: '\u200B', value: '\u200B' },
                    { name: 'üìõ' + ' –ö–∞–Ω–∞–ª –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è', value: `${server.afkChannel}`, inline: true },
                    { name: 'üìõ' + ' –í—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è', value: "`" + `${Math.floor(server.afkTimeout/60)} –º–∏–Ω—É—Ç` + "`", inline: true },
                    { name: '\u200B', value: '\u200B' },
                    { name: 'üìõ' + ` –†–æ–ª–µ–π ‚Äî \`${roles.length - 1}\``, value: `${roles.join(' | ')}`, inline: true },
                )
                // .setImage('URL')
                .setTimestamp()
                .setFooter({ text: message.author.tag, iconURL: message.author.avatarURL() });
            await interaction.editReply({ embeds: [serverEmbed] });
        }
    },
};